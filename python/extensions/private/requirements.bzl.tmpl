"""Starlark representation of locked requirements.

@generated by rules_python pip.parse extension.

This file is different from the other bzlmod template
because we do not support entry_point yet.
"""

load("@@%%RULES_PYTHON%%//python/pip_install:entry_point.bzl", _entry_point = "entry_point")

all_requirements = %%ALL_REQUIREMENTS%%

all_whl_requirements = %%ALL_WHL_REQUIREMENTS%%

all_data_requirements = %%ALL_DATA_REQUIREMENTS%%

_default_py_version = %%DEFAULT_PY_VERSION%%
_packages = %%PACKAGE_AVAILABILITY%%

def _clean_name(name):
    return name.replace("-", "_").replace(".", "_").lower()

def requirement(name):
    return "%%MACRO_TMPL%%".format(_clean_name(name), "pkg")

def whl_requirement(name):
    return "%%MACRO_TMPL%%".format(_clean_name(name), "whl")

def data_requirement(name):
    return "%%MACRO_TMPL%%".format(_clean_name(name), "data")

def dist_info_requirement(name):
    return "%%MACRO_TMPL%%".format(_clean_name(name), "dist_info")

def entry_point(pkg, script = None):
    """Returns a select() expression to locate the version-specific entry point.
    """
    # TODO: not implemented
    # selects = _entry_point(
    #     tmpl = "@@%%NAME%%//{pkg}/bin_py{version_label}:{script}",
    #     pkg = _clean_name(pkg),
    #     script = script,
    #     packages = _packages,
    #     default_version = _default_py_version,
    # )
    # if selects == None:
    #     fail("Package '{}' does not exist, select one from: {}".format(pkg, _packages.keys()))

    # # NOTE: We return a select() expression instead of an alias to such an expression
    # # to avoid having to eagerly load all versions of the wheel. See
    # # https://github.com/bazelbuild/rules_python/issues/1262 for discussion.
    # return select(selects)
