"""
This is a repo rule for downloading lots of METADATA files and then comparing them.
"""

load("@pythons_hub//:interpreters.bzl", "INTERPRETER_LABELS")
load("//python/private:repo_utils.bzl", "repo_utils")
load("//python/private:text_util.bzl", "render")
load(":deps.bzl", "record_files")
load(":parse_requirements.bzl", "host_platform")
load(":pypi_repo_utils.bzl", "pypi_repo_utils")
load(":simpleapi_download.bzl", "simpleapi_download")
load(":whl_metadata.bzl", "parse_whl_metadata")

# Used as a default value in a rule to ensure we fetch the dependencies.
PY_SRCS = [
    # When the version, or any of the files in `packaging` package changes,
    # this file will change as well.
    record_files["pypi__packaging"],
    Label("//python/private/pypi/whl_installer:platform.py"),
    Label("//python/private/pypi/whl_installer:wheel_deps.py"),
]

def _impl(rctx):
    logger = repo_utils.logger(rctx)
    data = simpleapi_download(
        rctx,
        attr = struct(
            index_url = "https://pypi.org/simple",
            index_url_overrides = {},
            extra_index_urls = [],
            sources = rctx.attr.distros,
            envsubst = [],
            netrc = None,
            auth_patterns = None,
        ),
        cache = {},
    )
    metadata_files = {}
    for pkg, d in data.items():
        last_version = d.sha256_by_version.keys()[-1]
        shas = d.sha256_by_version[last_version]
        whls = [
            d.whls[sha]
            for sha in shas
            if sha in d.whls
        ]
        if not whls:
            logger.warn("{} does not have any wheels, skipping".format(pkg))
            continue

        whl = whls[0]
        metadata_files[pkg] = (
            whl.metadata_url,
            whl.metadata_sha256,
        )

    downloads = {
        pkg + ".METADATA": rctx.download(
            url = [url],
            output = pkg + ".METADATA",
            sha256 = sha256,
            block = False,
        )
        for pkg, (url, sha256) in metadata_files.items()
    }

    rctx.file("BUILD.bazel", "")
    rctx.file("REPO.bazel", "")

    # TODO @aignas 2025-05-02: Change the algorithm to first:
    # Run a single execution of Python for each version where in one go we parse all of the METADATA files
    #
    # Then in a second loop we do the same for starlark whilst passing the python versions that we got.
    METADATA = {}
    for fname, d in downloads.items():
        result = d.wait()
        if not result.success:
            fail(fname)

        contents = rctx.read(fname)
        parsed = parse_whl_metadata(contents)

        METADATA[fname[:-len(".METADATA")]] = {
            "provides_extra": parsed.provides_extra,
            "requires_dist": parsed.requires_dist,
        }

    rctx.file("METADATA_list.txt", "\n".join(METADATA.keys()))

    py_parsed_deps = {}
    for py in rctx.attr.interpreters:
        output = pypi_repo_utils.execute_checked(
            rctx,
            op = "ParseDeps({})".format(py),
            python = pypi_repo_utils.resolve_python_interpreter(
                rctx,
                python_interpreter = None,
                python_interpreter_target = py,
            ),
            arguments = [
                "-m",
                "python.private.pypi.whl_installer.wheel_deps",
                "METADATA_list.txt",
            ],
            srcs = PY_SRCS,
            environment = {
                "PYTHONPATH": [
                    Label("@pypi__packaging//:BUILD.bazel"),
                    Label("//:BUILD.bazel"),
                ],
            },
            logger = logger,
        )
        if output.return_code != 0:
            # We have failed
            fail(output)

        decoded = json.decode(rctx.read("METADATA_list.txt.out"))
        python_version = decoded["version"]

        for name, deps in decoded["deps"].items():
            py_parsed_deps.setdefault(name, {})[python_version] = deps

    def _render_dict_of_dicts(outer):
        return render.dict(
            {
                k: render.dict(inner)
                for k, inner in outer.items()
            },
            value_repr = str,
        )

    defs_bzl = [
        "{} = {}".format(k, v)
        for k, v in {
            "HOST_PLATFORM": repr(host_platform(rctx)),
            "METADATA": _render_dict_of_dicts(METADATA),
            "WANT": _render_dict_of_dicts(py_parsed_deps),
        }.items()
    ]

    rctx.file("defs.bzl", "\n\n".join(defs_bzl))

whl_metadata_repo = repository_rule(
    implementation = _impl,
    attrs = {
        # Take it from https://hugovk.github.io/top-pypi-packages/
        "distros": attr.string_list(default = [
            "boto3",
            "urllib3",
            "requests",
            "botocore",
            "certifi",
            "charset-normalizer",
            "idna",
            "setuptools",
            "aiobotocore",
            "python-dateutil",
            "typing-extensions",
            "packaging",
            "six",
            "s3fs",
            "grpcio-status",
            "s3transfer",
            "numpy",
            "pyyaml",
            "fsspec",
            "pydantic",
            "cryptography",
            "google-api-core",
            "protobuf",
            "pip",
            "pandas",
            "importlib-metadata",
            "cffi",
            "attrs",
            "pycparser",
            "rsa",
            "jinja2",
            "pytz",
            "jmespath",
            "pyasn1",
            "markupsafe",
            "aiohttp",
            "click",
            "platformdirs",
            "wheel",
            "pydantic-core",
            "zipp",
            "colorama",
            "grpcio-tools",
            "awscli",
            "googleapis-common-protos",
            "filelock",
            "cachetools",
            "pyasn1-modules",
            "pluggy",
            "google-auth",
            "pyjwt",
            "virtualenv",
            "tzdata",
            "wrapt",
            "h11",
            "sniffio",
            "psutil",
            "anyio",
            "annotated-types",
            "pygments",
            "jsonschema",
            "pyarrow",
            "yarl",
            "pytest",
            "tomli",
            "multidict",
            "rich",
            "httpx",
            "grpcio",
            "httpcore",
            "iniconfig",
            "docutils",
            "requests-oauthlib",
            "sqlalchemy",
            "frozenlist",
            "google-cloud-storage",
            "tqdm",
            "tomlkit",
            "aiosignal",
            "pyparsing",
            "beautifulsoup4",
            "greenlet",
            "propcache",
            "requests-toolbelt",
            "soupsieve",
            "pillow",
            "pathspec",
            "oauthlib",
            "opensearch-py",
            "scipy",
            "more-itertools",
            "distlib",
            "exceptiongroup",
            "pyopenssl",
            "rpds-py",
            "werkzeug",
            "python-dotenv",
            "deprecated",
            "requests-aws4auth",
            "jsonschema-specifications",
            "cloudpickle",
            "openpyxl",
            "et-xmlfile",
            "isodate",
            "referencing",
            "lxml",
            "aiohappyeyeballs",
            "async-timeout",
            "trove-classifiers",
            "proto-plus",
            "decorator",
            "typing-inspection",
            "google-api-python-client",
            "snowflake-connector-python",
            "mypy-extensions",
            "azure-identity",
            "tenacity",
            "markdown-it-py",
            "coverage",
            "grpcio-health-checking",
            "google-cloud-core",
            "poetry-core",
            "msgpack",
            "mdurl",
            "websocket-client",
            "events",
            "flask",
            "pyzmq",
            "azure-core",
            "pynacl",
            "msal",
            "gitpython",
            "sortedcontainers",
            "aliyun-python-sdk-core",
            "shellingham",
            "opentelemetry-api",
            "langsmith",
            "asn1crypto",
            "psycopg2-binary",
            "dill",
            "regex",
            "opentelemetry-sdk",
            "google-resumable-media",
            "scikit-learn",
            "itsdangerous",
            "smmap",
            "opentelemetry-semantic-conventions",
            "wcwidth",
            "starlette",
            "gitdb",
            "fastapi",
            "google-crc32c",
            "keyring",
            "pexpect",
            "ptyprocess",
            "networkx",
            "bcrypt",
            "chardet",
            "tabulate",
            "blinker",
            "matplotlib",
            "threadpoolctl",
            "jaraco-classes",
            "huggingface-hub",
            "dnspython",
            "rapidfuzz",
            "yandexcloud",
            "jeepney",
            "fastjsonschema",
            "py4j",
            "importlib-resources",
            "pyproject-hooks",
            "build",
            "types-requests",
            "secretstorage",
            "sphinx",
            "paramiko",
            "google-cloud-bigquery",
            "joblib",
            "prompt-toolkit",
            "uvicorn",
            "sqlparse",
            "backoff",
            "fonttools",
            "alembic",
            "ruamel-yaml",
            "kiwisolver",
            "httplib2",
            "typedload",
            "xmltodict",
            "google-auth-oauthlib",
            "langchain",
            "ipython",
            "rich-toolkit",
            "asgiref",
            "defusedxml",
            "pkginfo",
            "azure-storage-blob",
            "msal-extensions",
            "cycler",
            "marshmallow",
            "pytest-cov",
            "redis",
            "docker",
            "grpc-google-iam-v1",
            "uritemplate",
            "google-auth-httplib2",
            "awswrangler",
            "distro",
            "openai",
            "babel",
            "jaraco-functools",
            "gunicorn",
            "opentelemetry-proto",
            "tzlocal",
            "black",
            "nest-asyncio",
            "poetry-plugin-export",
            "transformers",
            "cachecontrol",
            "traitlets",
            "termcolor",
            "isort",
            "zstandard",
            "jaraco-context",
            "contourpy",
            "jedi",
            "toml",
            "installer",
            "opentelemetry-exporter-otlp-proto-common",
            "parso",
            "websockets",
            "typer",
            "opentelemetry-exporter-otlp-proto-http",
            "pycodestyle",
            "cython",
            "types-python-dateutil",
            "jsonpointer",
            "pymysql",
            "poetry",
            "ruamel-yaml-clib",
            "setuptools-scm",
            "gym-notices",
            "matplotlib-inline",
            "markdown",
            "tornado",
            "opentelemetry-exporter-otlp-proto-grpc",
            "hatchling",
            "dulwich",
            "snowflake-sqlalchemy",
            "pendulum",
            "crashtest",
            "sentry-sdk",
            "kubernetes",
            "prometheus-client",
            "weaviate-client",
            "py",
            "mako",
            "asttokens",
            "mccabe",
            "executing",
            "cleo",
            "langchain-core",
            "webencodings",
            "orjson",
            "tokenizers",
            "mypy",
            "typing-inspect",
            "sympy",
            "multiprocess",
            "ply",
            "ruff",
            "stack-data",
            "pure-eval",
            "thriftpy2",
            "smart-open",
            "torch",
            "python-json-logger",
            "snowflake-snowpark-python",
            "uv",
            "argcomplete",
            "pycryptodome",
            "pymongo",
            "nodeenv",
            "aiofiles",
            "mpmath",
            "pytest-xdist",
            "arrow",
            "opentelemetry-exporter-otlp",
            "watchdog",
            "shapely",
            "pyrsistent",
            "scramp",
            "email-validator",
            "debugpy",
            "python-slugify",
            "lz4",
            "future",
            "datadog",
            "google-cloud-pubsub",
            "opentelemetry-instrumentation",
            "pyspark",
            "backports-tarfile",
            "jsonpatch",
            "aioitertools",
            "jiter",
            "pygithub",
            "identify",
            "jupyter-client",
            "jsonpath-ng",
            "jupyter-core",
            "pytest-asyncio",
            "jupyterlab",
            "cfgv",
            "msrest",
            "pre-commit",
            "pycryptodomex",
            "execnet",
            "semver",
            "slack-sdk",
            "ipykernel",
            "redshift-connector",
            "google-cloud-secret-manager",
            "setproctitle",
            "pyflakes",
            "mysql-connector-python",
            "azure-common",
            "comm",
            "azure-storage-file-datalake",
            "gcsfs",
            "opentelemetry-util-http",
            "tinycss2",
            "colorlog",
            "requests-file",
            "bleach",
            "rfc3339-validator",
            "tableauserverclient",
            "oss2",
            "mistune",
            "apache-beam",
            "pytest-mock",
            "sqlalchemy-bigquery",
            "nbformat",
            "text-unidecode",
            "apache-airflow-providers-common-sql",
            "editables",
            "nbconvert",
            "dataclasses-json",
            "google-cloud-resource-manager",
            "notebook",
            "croniter",
            "tiktoken",
            "nbclient",
            "types-pyyaml",
            "elasticsearch",
            "typeguard",
            "flake8",
            "pydantic-settings",
            "python-multipart",
            "google-cloud-aiplatform",
            "overrides",
            "pytzdata",
            "nltk",
            "cattrs",
            "safetensors",
            "zope-interface",
            "xlsxwriter",
            "lazy-object-proxy",
            "jupyter-server",
            "tb-nightly",
            "ordered-set",
            "pg8000",
            "opentelemetry-instrumentation-requests",
            "pandocfilters",
            "jupyterlab-pygments",
            "uvloop",
            "humanfriendly",
            "watchfiles",
            "opentelemetry-exporter-prometheus",
            "astroid",
            "simplejson",
            "pbs-installer",
            "gevent",
            "argon2-cffi",
            "findpython",
            "google-pasta",
            "google-cloud-appengine-logging",
            "argon2-cffi-bindings",
            "databricks-sql-connector",
            "toolz",
            "fastavro",
            "docstring-parser",
            "pinotdb",
            "deepdiff",
            "datasets",
            "gym",
            "absl-py",
            "python-telegram-bot",
            "nvidia-cublas-cu12",
            "xlrd",
            "jupyterlab-server",
            "nvidia-cusparse-cu12",
            "aenum",
            "altair",
            "json5",
            "durationpy",
            "httptools",
            "nvidia-nvjitlink-cu12",
            "pylint",
            "pysocks",
            "databricks-sdk",
            "graphql-core",
            "structlog",
            "pandas-gbq",
            "responses",
            "types-protobuf",
            "retry",
            "nvidia-cufft-cu12",
            "nvidia-curand-cu12",
            "sentencepiece",
            "nvidia-cusolver-cu12",
            "nvidia-cuda-cupti-cu12",
            "nvidia-cudnn-cu12",
            "tblib",
            "time-machine",
            "nvidia-cuda-runtime-cu12",
            "nvidia-cuda-nvrtc-cu12",
            "db-dtypes",
            "libcst",
            "pbr",
            "tensorboard",
            "hvac",
            "pyodbc",
            "imageio",
            "webcolors",
            "wsproto",
            "tf-keras-nightly",
            "xxhash",
            "gcloud-aio-storage",
            "oauth2client",
            "h5py",
            "azure-keyvault-secrets",
            "send2trash",
            "thrift",
            "google-cloud-logging",
            "flatbuffers",
            "xgboost",
            "schema",
            "google-cloud-dataproc",
            "seaborn",
            "nvidia-nccl-cu12",
            "inflection",
            "selenium",
            "narwhals",
            "types-pytz",
            "ipywidgets",
            "appdirs",
            "fqdn",
            "oscrypto",
            "pkgutil-resolve-name",
            "async-lru",
            "widgetsnbextension",
            "isoduration",
            "portalocker",
            "uri-template",
            "rfc3986",
            "aws-lambda-powertools",
            "terminado",
            "jupyterlab-widgets",
            "faker",
            "adal",
            "confluent-kafka",
            "triton",
            "rfc3986-validator",
            "types-setuptools",
            "python-daemon",
            "pymssql",
            "notebook-shim",
            "plotly",
            "dbt-core",
            "sagemaker",
            "authlib",
            "jupyter-events",
            "dbt-adapters",
            "progressbar2",
            "coloredlogs",
            "tox",
            "loguru",
            "yamllint",
            "google-cloud-spanner",
            "google-cloud-audit-log",
            "google-cloud-bigquery-storage",
            "hpack",
            "numba",
            "hyperframe",
            "microsoft-kiota-authentication-azure",
            "deprecation",
            "h2",
            "tensorflow",
            "python-utils",
        ]),
        "interpreters": attr.label_list(
            default = INTERPRETER_LABELS.values(),
        ),
    },
)
