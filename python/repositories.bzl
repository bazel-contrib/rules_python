# Copyright 2022 The Bazel Authors. All rights reserved.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#    http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

"""This file contains macros to be called during WORKSPACE evaluation.

For historic reasons, pip_repositories() is defined in //python:pip.bzl.
"""

load("//python/private:toolchains_repo.bzl", "PLATFORMS", "toolchains_repo")
load("//python/private:versions.bzl", "MINOR_MAPPING", "RELEASE_DATE", "RELEASE_URL", "TOOL_VERSIONS")

def py_repositories():
    # buildifier: disable=print
    print("py_repositories is a no-op and is deprecated. You can remove this from your WORKSPACE file")

########
# Remaining content of the file is only used to support toolchains.
########

def _python_repository_impl(rctx):
    platform = rctx.attr.platform
    is_host_windows = "win" in rctx.os.name
    is_target_windows = "windows" in rctx.attr.platform
    python_version = rctx.attr.python_version
    build = "static-install_only" if is_target_windows else "install_only"
    release_filename = "cpython-{version}+{release_date}-{platform}-{build}.tar.gz".format(
        build = build,
        platform = platform,
        release_date = RELEASE_DATE,
        version = python_version,
    )
    url = "{release_url}/{release_filename}".format(
        release_url = RELEASE_URL,
        release_filename = release_filename,
    )
    download_result = rctx.download_and_extract(
        url = url,
        integrity = rctx.attr.integrity,
        stripPrefix = "python",
    )

    # Remove files with spaces.
    if is_host_windows:
        arguments = [
            "powershell.exe",
            "-c",
            """Get-ChildItem -File -Path "$(Get-Location)" -Include "* *" -Recurse | Remove-Item -Force -Verbose""",
        ]
    else:
        arguments = [
            "find",
            ".",
            "-type",
            "f",
            "-name",
            "*[[:space:]]*",
            "-delete",
        ]
    exec_result = rctx.execute(arguments)
    if exec_result.return_code:
        fail(exec_result.stderr)

    python_bin = "python.exe" if is_target_windows else "bin/python3"

    build_content = """\
# Generated by python/repositories.bzl

load("@bazel_tools//tools/python:toolchain.bzl", "py_runtime_pair")

package(default_visibility = ["//visibility:public"])

filegroup(
    name = "files",
    srcs = glob(
        include = [
            "bin/**",
            "DLLs/**",
            "extensions/**",
            "include/**",
            "lib/**",
            "libs/**",
            "Scripts/**",
            "share/**",
        ],
        exclude = [
            "**/__pycache__/**",
        ],
    ),
)

exports_files(["{python_path}"])

py_runtime(
    name = "py2_runtime",
    interpreter_path = "/bin/false",
    python_version = "PY2",
)

py_runtime(
    name = "py3_runtime",
    files = [":files"],
    interpreter = "{python_path}",
    python_version = "PY3",
)

py_runtime_pair(
    name = "python_runtimes",
    py2_runtime = ":py2_runtime",
    py3_runtime = ":py3_runtime",
)
""".format(
        python_path = python_bin,
    )
    rctx.file("BUILD.bazel", build_content)

    return {
        "integrity": download_result.integrity,
        "name": rctx.attr.name,
        "platform": platform,
        "python_version": python_version,
    }

python_repository = repository_rule(
    _python_repository_impl,
    doc = "Fetches the external tools needed for the Python toolchain.",
    attrs = {
        "integrity": attr.string(
            doc = "The integrity hash for the Python interpreter tarball.",
            mandatory = True,
        ),
        "platform": attr.string(
            doc = "TODO",
            mandatory = True,
            values = PLATFORMS.keys(),
        ),
        "python_version": attr.string(
            doc = "The Python version.",
            mandatory = True,
            values = TOOL_VERSIONS.keys() + MINOR_MAPPING.keys(),
        ),
    },
)

# Wrapper macro around everything above, this is the primary API.
def python_register_toolchains(name, python_version, **kwargs):
    """Convenience macro for users which does typical setup.

    - Create a repository for each built-in platform like "python_linux_amd64" -
      this repository is lazily fetched when Python is needed for that platform.
    - TODO(f0rmiga): create a convenience repository for the host platform like
      "python_host".
    - Create a repository exposing toolchains for each platform like
      "python_platforms".
    - Register a toolchain pointing at each platform.
    Users can avoid this macro and do these steps themselves, if they want more
    control.
    Args:
        name: base name for all created repos, like "python38".
        python_version: the Python version.
        **kwargs: passed to each python_repositories call.
    """
    if python_version in MINOR_MAPPING:
        python_version = MINOR_MAPPING[python_version]

    for platform in PLATFORMS.keys():
        integrity = TOOL_VERSIONS[python_version][platform]
        python_repository(
            name = "{name}_{platform}".format(
                name = name,
                platform = platform,
            ),
            integrity = integrity,
            platform = platform,
            python_version = python_version,
            **kwargs
        )
        native.register_toolchains("@{name}_toolchains//:{platform}_toolchain".format(
            name = name,
            platform = platform,
        ))

    toolchains_repo(
        name = "{name}_toolchains".format(name = name),
        user_repository_name = name,
    )
