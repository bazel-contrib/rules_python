# Copyright 2022 The Bazel Authors. All rights reserved.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#    http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

"""This file contains macros to be called during WORKSPACE evaluation.

For historic reasons, pip_repositories() is defined in //python:pip.bzl.
"""

load("//python/private:toolchains_repo.bzl", "PLATFORMS", "toolchains_repo")
load("//python/private:versions.bzl", "MINOR_MAPPING", "RELEASE_DATE", "RELEASE_URL", "TOOL_VERSIONS")

def py_repositories():
    # buildifier: disable=print
    print("py_repositories is a no-op and is deprecated. You can remove this from your WORKSPACE file")

########
# Remaining content of the file is only used to support toolchains.
########
_DOC = "Fetch external tools needed for python toolchain."
_ATTRS = {
    "integrity": attr.string(mandatory = True),
    "platform": attr.string(mandatory = True, values = PLATFORMS.keys()),
    "python_version": attr.string(mandatory = True, values = TOOL_VERSIONS.keys() + MINOR_MAPPING.keys()),
}

def _python_repository_impl(rctx):
    python_version = rctx.attr.python_version
    platform = rctx.attr.platform
    release_filename = "cpython-{version}-{platform}-pgo+lto-{release_date}.tar.zst".format(
        release_date = RELEASE_DATE,
        version = python_version,
        platform = platform,
    )
    url = "{release_url}/{release_filename}".format(
        release_url = RELEASE_URL,
        release_filename = release_filename,
    )
    integrity = rctx.attr.integrity
    rctx.download(
        url = url,
        integrity = integrity,
        output = release_filename,
    )
    unzstd = rctx.which("unzstd")
    if not unzstd:
        url = rctx.attr._zstd_url.format(version = rctx.attr._zstd_version)
        rctx.download_and_extract(
            url = url,
            sha256 = rctx.attr._zstd_sha256,
        )
        working_directory = "zstd-{version}".format(version = rctx.attr._zstd_version)
        rctx.execute(
            ["make", "--jobs=4"],
            timeout = 600,
            quiet = True,
            working_directory = working_directory,
        )
        zstd = "{working_directory}/zstd".format(working_directory = working_directory)
        unzstd = "./unzstd"
        rctx.symlink(zstd, unzstd)

    exec_result = rctx.execute([
        "tar",
        "--extract",
        "--strip-components=2",
        "--use-compress-program={unzstd}".format(unzstd = unzstd),
        "--file={}".format(release_filename),
    ])
    if exec_result.return_code:
        fail(exec_result.stderr)

    # Remove files with spaces.
    exec_result = rctx.execute([
        "find",
        ".",
        "-type",
        "f",
        "-name",
        "*[[:space:]]*",
        "-delete",
    ])
    if exec_result.return_code:
        fail(exec_result.stderr)

    build_content = """\
# Generated by python/repositories.bzl

load("@bazel_tools//tools/python:toolchain.bzl", "py_runtime_pair")

filegroup(
    name = "files",
    srcs = glob([
        "bin/**",
        "include/**",
        "lib/**",
        "share/**",
    ]),
    visibility = ["//visibility:public"],
)

exports_files(["bin/python3"])

py_runtime(
    name = "py2_runtime",
    interpreter_path = "/bin/false",
    python_version = "PY2",
)

py_runtime(
    name = "py3_runtime",
    files = [":files"],
    interpreter = "bin/python3",
    python_version = "PY3",
)

py_runtime_pair(
    name = "python_runtimes",
    py2_runtime = ":py2_runtime",
    py3_runtime = ":py3_runtime",
)
"""
    rctx.file("BUILD.bazel", build_content)

    return {
        "integrity": integrity,
        "name": rctx.attr.name,
        "platform": platform,
        "python_version": python_version,
    }

python_repository = repository_rule(
    _python_repository_impl,
    doc = _DOC,
    attrs = dict({
        "_zstd_sha256": attr.string(
            default = "7c42d56fac126929a6a85dbc73ff1db2411d04f104fae9bdea51305663a83fd0",
        ),
        "_zstd_url": attr.string(
            default = "https://github.com/facebook/zstd/releases/download/v{version}/zstd-{version}.tar.gz",
        ),
        "_zstd_version": attr.string(
            default = "1.5.2",
        ),
    }, **_ATTRS),
)

# Wrapper macro around everything above, this is the primary API.
def python_register_toolchains(name, python_version, **kwargs):
    """Convenience macro for users which does typical setup.

    - Create a repository for each built-in platform like "python_linux_amd64" -
      this repository is lazily fetched when Python is needed for that platform.
    - TODO(f0rmiga): create a convenience repository for the host platform like
      "python_host".
    - Create a repository exposing toolchains for each platform like
      "python_platforms".
    - Register a toolchain pointing at each platform.
    Users can avoid this macro and do these steps themselves, if they want more
    control.
    Args:
        name: base name for all created repos, like "python38".
        python_version: the Python version.
        **kwargs: passed to each python_repositories call.
    """
    if python_version in MINOR_MAPPING:
        python_version = MINOR_MAPPING[python_version]

    for platform in PLATFORMS.keys():
        integrity = TOOL_VERSIONS[python_version][platform]
        python_repository(
            name = "{name}_{platform}".format(
                name = name,
                platform = platform,
            ),
            integrity = integrity,
            platform = platform,
            python_version = python_version,
            **kwargs
        )
        native.register_toolchains("@{name}_toolchains//:{platform}_toolchain".format(
            name = name,
            platform = platform,
        ))

    toolchains_repo(
        name = "{name}_toolchains".format(name = name),
        user_repository_name = name,
    )
