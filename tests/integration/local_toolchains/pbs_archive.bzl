"""A repository rule to download and extract a Python runtime archive."""

BUILD_BAZEL = """
# Generated by pbs_archive.bzl

package(
    default_visibility = ["//visibility:public"],
)

exports_files(glob(["**"]))
"""

def _pbs_archive_impl(repository_ctx):
    """Implementation of the python_build_standalone_archive rule."""
    os_name = repository_ctx.os.name.lower()
    urls = repository_ctx.attr.urls
    sha256s = repository_ctx.attr.sha256

    if os_name not in urls:
        fail("Unsupported OS: '{}'. Available OSs are: {}".format(
            os_name,
            ", ".join(urls.keys()),
        ))

    url = urls[os_name]
    sha256 = sha256s.get(os_name, "")

    repository_ctx.download_and_extract(
        url = url,
        sha256 = sha256,
    )

    repository_ctx.file("BUILD.bazel", BUILD_BAZEL)

pbs_archive = repository_rule(
    implementation = _pbs_archive_impl,
    attrs = {
        "sha256": attr.string_dict(
            doc = "A dictionary of SHA256 checksums for the archives, keyed by OS name.",
            mandatory = True,
        ),
        "urls": attr.string_dict(
            doc = "A dictionary of URLs to the runtime archives, keyed by OS name (e.g., 'linux', 'windows').",
            mandatory = True,
        ),
    },
    doc = """
Downloads and extracts a Python runtime archive for the current OS.

This rule selects a URL from the `urls` attribute based on the host OS,
downloads the archive, and extracts it.
""",
)
