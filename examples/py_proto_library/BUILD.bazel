load("@rules_proto//proto:defs.bzl", "proto_library")
load("@rules_python//python:defs.bzl", "py_test")
load("@rules_python//python:proto.bzl", "py_proto_library")

proto_library(
    name = "pricetag_proto",
    srcs = ["pricetag.proto"],
)

py_proto_library(
    name = "pricetag_proto_py_pb2",
    deps = [":pricetag_proto"],
)

py_test(
    name = "pricetag_test",
    srcs = ["test.py"],
    main = "test.py",
    deps = [
        ":pricetag_proto_py_pb2",
    ],
)

# if you use import_prefix or strip_import_prefix on a proto_library the resulting python module path will be altered
# without stripping "tostrip" our module path would have been tostrip.pricetag_with_prefix_pb2
# after stripping, the prefix is added, resulting in the path being prefixed.pricetag_with_prefix_pb2
proto_library(
    name = "pricetag_with_prefix_proto",
    srcs = ["tostrip/pricetag_with_prefix.proto"],
    import_prefix = "prefixed",
    strip_import_prefix = "tostrip",
)

py_proto_library(
    name = "pricetag_with_prefix_proto_py_pb2",
    deps = [":pricetag_with_prefix_proto"],
)

py_test(
    name = "pricetag_with_prefix_test",
    srcs = ["test_with_prefix.py"],
    main = "test_with_prefix.py",
    deps = [
        ":pricetag_with_prefix_proto_py_pb2",
    ],
)

# see external_workspace/BUILD.bazel for the definitions of the dependencies in these tests
# when consuming py_proto_libraries in different workspaces, the external worksapce name is the first element of the import path
py_test(
    name = "external_test",
    srcs = ["external_test.py"],
    main = "external_test.py",
    deps = [
        "@external_workspace//:external_pricetag_proto_py_pb2",
    ],
)

# note that for stripped or prefixed proto_libraries in external worksaces, you do not need the external workspace name
py_test(
    name = "external_with_prefix_test",
    srcs = ["external_with_prefix_test.py"],
    main = "external_with_prefix_test.py",
    deps = [
        "@external_workspace//:external_pricetag_with_prefix_proto_py_pb2",
    ],
)
