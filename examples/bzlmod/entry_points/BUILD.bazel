load("@bazel_skylib//rules:run_binary.bzl", "run_binary")
load("@bazel_skylib//rules:write_file.bzl", "write_file")
load("@python_versions//3.9:defs.bzl", py_console_script_binary_3_9 = "py_console_script_binary")
load("@rules_python//python:defs.bzl", "py_test")
load("@rules_python//python/entry_points:py_console_script_binary.bzl", "py_console_script_binary")

# Here we are running the default version.
py_console_script_binary(
    name = "pylint",
    pkg = "@pip//pylint",
)

py_console_script_binary(
    name = "pylint_with_deps",
    pkg = "@pip//pylint",
    # Because `pylint` has multiple console_scripts available, we have to
    # specify which we want if the name of the target is not the same as the
    # desired script.
    script = "pylint",
    deps = [
        # One can add extra dependencies to the entry point.
        "@pip//pylint_print",
    ],
)

# We can specifically request the py_console_script_binary to be running with Python 3.9.
py_console_script_binary_3_9(
    name = "yamllint",
    pkg = "@pip//yamllint:pkg",
)

py_test(
    name = "yamllint_test",
    srcs = ["yamllint_test.py"],
    data = [":yamllint"],
    env = {
        "ENTRY_POINT": "$(rlocationpath :yamllint)",
    },
    deps = ["@rules_python//python/runfiles"],
)

py_test(
    name = "pylint_test",
    srcs = ["pylint_test.py"],
    data = [":pylint"],
    env = {
        "ENTRY_POINT": "$(rlocationpath :pylint)",
    },
    deps = ["@rules_python//python/runfiles"],
)

write_file(
    name = "file_with_pylint_errors",
    out = "file_with_pylint_errors.py",
    content = [
        '"""',
        "a module to demonstrate the pylint-print checker",
        '"""',
        "",
        'if __name__ == "__main__":',
        '    print("Hello, World!")',
    ],
)

run_binary(
    name = "pylint_report",
    srcs = [
        ":file_with_pylint_errors",
    ],
    outs = ["pylint_report.txt"],
    args = [
        "--output-format=text:$(location pylint_report.txt)",
        "--load-plugins=pylint_print",
        "--exit-zero",
        "$(location :file_with_pylint_errors)",
    ],
    env = {
        # otherwise it may try to create ${HOME}/.cache/pylint
        "PYLINTHOME": "./.pylint_home",
    },
    tool = ":pylint_with_deps",
)

py_test(
    name = "pylint_deps_test",
    srcs = ["pylint_deps_test.py"],
    data = [
        ":pylint_report",
        ":pylint_with_deps",
    ],
    env = {
        "ENTRY_POINT": "$(rlocationpath :pylint_with_deps)",
        "PYLINT_REPORT": "$(rlocationpath :pylint_report)",
    },
    deps = ["@rules_python//python/runfiles"],
)
