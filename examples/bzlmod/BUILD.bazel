load("@pip//:requirements.bzl", "requirement")
load("@pip//yamllint:bin.bzl", yamllint_bin = "bin")
load("@python3_9//:defs.bzl", py_test_with_transition = "py_test")
load("@rules_python//python:defs.bzl", "py_binary", "py_library", "py_test")
load("@rules_python//python:pip.bzl", "compile_pip_requirements")

compile_pip_requirements(
    name = "requirements",
    extra_args = ["--allow-unsafe"],
    requirements_in = "requirements.in",
    requirements_txt = "requirements_lock.txt",
    requirements_windows = "requirements_windows.txt",
)

py_library(
    name = "lib",
    srcs = ["lib.py"],
    deps = [
        requirement("pylint"),
        requirement("tabulate"),
        requirement("python-dateutil"),
    ],
)

py_binary(
    name = "bzlmod",
    srcs = ["__main__.py"],
    main = "__main__.py",
    visibility = ["//:__subpackages__"],
    deps = [
        ":lib",
    ],
)

py_test(
    name = "test",
    srcs = ["test.py"],
    deps = [":lib"],
)

py_test_with_transition(
    name = "test_with_transition",
    srcs = ["test.py"],
    main = "test.py",
    deps = [":lib"],
)

alias(
    name = "yamllint",
    # This is using the struct defined by the spoke repo 'yamllint' and it is
    # re-exported by the hub repo named 'pip'. This allows bzlmod and
    # non-bzlmod users to access the entry point targets.
    actual = yamllint_bin.yamllint,
)
